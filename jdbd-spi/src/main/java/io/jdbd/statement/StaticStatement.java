package io.jdbd.statement;

import io.jdbd.JdbdSQLException;
import io.jdbd.result.*;
import org.reactivestreams.Publisher;

import java.util.function.Consumer;

/**
 * <p>
 * This interface is reactive version of {@code java.sql.Statement}
 * </p>
 */
public interface StaticStatement extends Statement,StaticStatementSpec {



    /**
     * @see #executeQuery(String, Consumer)
     */
    Publisher<ResultRow> executeQuery(String sql);


    /**
     * Executes the SQL query in this <code>PreparedStatement</code> object
     * and returns the <code>ResultSet</code> object generated by the query.
     *
     * @return a <code>ResultSet</code> object that contains the data produced by the
     * query; never <code>null</code>
     * <p>
     * Flux throw {@link JdbdSQLException } if a database access error occurs;
     * this method is called on a closed  <code>PreparedStatement</code> or the SQL
     * statement does not return a <code>ResultSet</code> object
     * </p>
     */
    Publisher<ResultRow> executeQuery(String sql, Consumer<ResultStates> statesConsumer);





}
