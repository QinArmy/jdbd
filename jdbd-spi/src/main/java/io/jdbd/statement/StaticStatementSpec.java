package io.jdbd.statement;

import io.jdbd.result.*;
import io.jdbd.session.DatabaseSession;
import org.reactivestreams.Publisher;

import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;

/**
 * <p>
 * This interface is base interface of following:
 *     <ul>
 *         <li>{@link StaticStatement},it execute static statement with statement options. eg: timeout</li>
 *         <li>{@link DatabaseSession},it execute static statement without any statement options. eg: timeout</li>
 *     </ul>
 * </p>
 *
 * @since 1.0
 */
public interface StaticStatementSpec {


    /**
     * Executes the given SQL statement(no parameter placeholder) thant can only producer one update result.
     * for example :
     * <ul>
     *     <li>INSERT</li>
     *     <li>UPDATE</li>
     *     <li>DELETE</li>
     *     <li>CREATE TABLE</li>
     *     <li>CALL Stored procedures that just produce one update result and no out parameter.</li>
     * </ul>
     * this method like {@code java.sql.Statement#executeUpdate(String)}
     * <p>
     *     <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     *
     * @param sql sql thant can only producer one update result.
     * @return a deferred publisher that emit at most one element, like {@code reactor.core.publisher.Mono},
     * no communication with database server util subscribe.
     * @throws io.jdbd.JdbdException emit when if occur other error.
     */
    Publisher<ResultStates> executeUpdate(String sql);


    Publisher<ResultRow> executeQuery(String sql);

    <R> Publisher<R> executeQuery(String sql, Function<CurrentRow, R> function);

    /**
     * Executes the SQL query in this <code>PreparedStatement</code> object
     * and returns the <code>ResultSet</code> object generated by the query.
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     *
     * @return a <code>ResultSet</code> object that contains the data produced by the
     * query; never <code>null</code>
     * <p>
     * Flux throw {@link io.jdbd.JdbdException } if a database access error occurs;
     * this method is called on a closed  <code>PreparedStatement</code> or the SQL
     * statement does not return a <code>ResultSet</code> object
     * </p>
     */
    <R> Publisher<R> executeQuery(String sql, Function<CurrentRow, R> function, Consumer<ResultStates> statesConsumer);

    /**
     * <p>
     * Declare one cursor.
     * </p>
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     *
     * @param sql the statement that declare cursor.
     * @return emit one {@link RefCursor} or {@link io.jdbd.JdbdException}
     * @throws io.jdbd.JdbdException emit(not throw) when :
     *                               <ul>
     *                                   <li>{@link DatabaseSession#isSupportRefCursor()} return false</li>
     *                                   <li>session have closed</li>
     *                                   <li>server response error message,see {@link ServerException}</li>
     *                               </ul>
     */
    Publisher<RefCursor> declareCursor(String sql);

    /**
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     */
    Publisher<ResultStates> executeBatchUpdate(List<String> sqlGroup);

    /**
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     */
    BatchQuery executeBatchQuery(List<String> sqlGroup);

    /**
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     */
    MultiResult executeBatchAsMulti(List<String> sqlGroup);

    /**
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     */
    OrderedFlux executeBatchAsFlux(List<String> sqlGroup);

    /**
     * <p>
     * <strong>NOTE</strong> : driver don't send message to database server before subscribing.
     * </p>
     */
    OrderedFlux executeAsFlux(String multiStmt);


}
