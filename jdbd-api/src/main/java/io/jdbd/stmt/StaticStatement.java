package io.jdbd.stmt;

import io.jdbd.JdbdSQLException;
import io.jdbd.result.MultiResult;
import io.jdbd.result.ResultRow;
import io.jdbd.result.ResultStatus;
import io.jdbd.result.SingleResult;
import org.reactivestreams.Publisher;

import java.util.List;
import java.util.function.Consumer;

/**
 * <p>
 * This interface is reactive version of {@code java.sql.Statement}
 * </p>
 */
public interface StaticStatement extends Statement {

    @Override
    boolean supportLongData();

    @Override
    boolean supportOutParameter();

    Publisher<ResultStatus> executeBatch(List<String> sqlList);


    /**
     * Executes the SQL statement in this <code>PreparedStatement</code> object,
     * which must be an SQL Data Manipulation Language (DML) statement, such as <code>INSERT</code>, <code>UPDATE</code> or
     * <code>DELETE</code>; or an SQL statement that returns nothing,
     * such as a DDL statement.
     *
     * <p>
     * Mono publish {@link JdbdSQLException}, if a database access error occurs;
     * this method is called on a closed  <code>PreparedStatement</code>
     * or the SQL statement returns a <code>ReactiveResultSet</code> object
     * </p>
     *
     * @return either (1) the row count for SQL Data Manipulation Language (DML) statements
     * or (2) 0 for SQL statements that return nothing
     * @see java.sql.PreparedStatement#executeUpdate()
     */
    Publisher<ResultStatus> executeUpdate(String sql);

    /**
     * @see #executeQuery(String, Consumer)
     */
    Publisher<ResultRow> executeQuery(String sql);

    /**
     * Executes the SQL query in this <code>PreparedStatement</code> object
     * and returns the <code>ResultSet</code> object generated by the query.
     *
     * @return a <code>ResultSet</code> object that contains the data produced by the
     * query; never <code>null</code>
     * <p>
     * Flux throw {@link JdbdSQLException } if a database access error occurs;
     * this method is called on a closed  <code>PreparedStatement</code> or the SQL
     * statement does not return a <code>ResultSet</code> object
     * </p>
     */
    Publisher<ResultRow> executeQuery(String sql, Consumer<ResultStatus> statesConsumer);


    MultiResult executeAsMulti(List<String> sqlList);

    Publisher<SingleResult> executeAsFlux(List<String> sqlList);

    boolean setExecuteTimeout(int seconds);


}
